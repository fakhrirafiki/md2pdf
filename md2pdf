#!/bin/bash

mkdir -p ./build

show_help() {
  echo "Usage: md2pdf [file.md] [--theme THEME_NAME] [--latex]"
  echo "  --theme        Pilih template/tema PDF dan latex (default: minimalist-template)"
  echo "  --latex        Juga export ke TEX (latex) selain PDF"
  echo "  -h, --help     Tampilkan bantuan ini"
  exit 1
}

# Defaults
THEME_NAME="minimalist-template"
EXPORT_TEX=false

# Parse args
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --theme)
      THEME_NAME="$2"
      shift 2
      ;;
    --latex)
      EXPORT_TEX=true
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      POSITIONAL+=("$1")
      shift
      ;;
  esac
done

set -- "${POSITIONAL[@]}"

if [ $# -eq 0 ]; then
  show_help
fi

INPUT_FILE="$1"
if [[ ! "$INPUT_FILE" =~ \.md$ ]]; then
  echo "‚ùå Input harus file markdown (.md)!"
  exit 1
fi
if [ ! -f "$INPUT_FILE" ]; then
  echo "‚ùå File '$INPUT_FILE' tidak ditemukan!"
  exit 1
fi

# Setelah parsing argumen, tambahkan ini:
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

MD_DIR=$(dirname "$INPUT_FILE")
BASENAME=$(basename "$INPUT_FILE" .md)
TIMESTAMP=$(date +%y%m%d-%H%M)
RESULT_DIR="$MD_DIR/result"
mkdir -p "$RESULT_DIR"

# Metadata fallback logic
MD_METADATA="$MD_DIR/metadata.yaml"
ROOT_METADATA="$SCRIPT_DIR/metadata.yaml"

if [ -f "$MD_METADATA" ]; then
  METADATA_FILE="$MD_METADATA"
elif [ -f "$ROOT_METADATA" ]; then
  METADATA_FILE="$ROOT_METADATA"
else
  METADATA_FILE=""
  echo "‚ö†Ô∏è  metadata.yaml tidak ditemukan, lanjut tanpa metadata."
fi

CONVERTED_FILE="./build/${BASENAME}.converted.md"
OUTPUT_FILE="$RESULT_DIR/${BASENAME}-${TIMESTAMP}.pdf"
OUTPUT_TEX_FILE="$RESULT_DIR/${BASENAME}-${TIMESTAMP}.tex"

TEMPLATE_PATH="$SCRIPT_DIR/themes/$THEME_NAME/main.tex"
FILTER_DIR="$SCRIPT_DIR/themes/$THEME_NAME/filters"

convert_quotes() {
  awk '
  BEGIN { quoting=0 }
  /^> / {
    if (!quoting) {
      print "::: {.quotebox}"
      quoting=1
    }
    sub(/^> /, "")
    print
    next
  }
  {
    if (quoting) {
      print ":::"
      quoting=0
    }
    print
  }
  END {
    if (quoting) print ":::"
  }
  ' "$INPUT_FILE" > "$CONVERTED_FILE"
}

convert_images() {
  awk '
    {
      line = $0
      if (match(line, /!\[[^]]*\]\([^)]*\)\{[^}]*width=[0-9]+%[^}]*\}/)) {
        alt_start = index(line, "![") + 2
        alt_end = index(line, "](") - 1
        alt = substr(line, alt_start, alt_end - alt_start + 1)
        path_start = index(line, "](") + 2
        path_end = index(line, ")") - 1
        path = substr(line, path_start, path_end - path_start + 1)
        w_match = match(line, /width=[0-9]+%/)
        if (w_match > 0) {
          width_val = substr(line, RSTART + 6, RLENGTH - 7)
          if (width_val == "100") width = "1.0"
          else width = "0." width_val
        } else {
          width = "1.0"
        }
        printf "\\imageins{%s}{%s}{%s}{X.X}\n", path, width, alt
        next
      }
      print
    }
  ' "$CONVERTED_FILE" > "$CONVERTED_FILE.img"
  mv "$CONVERTED_FILE.img" "$CONVERTED_FILE"
}

build_with_pandoc() {
  local output_file=$1
  local output_format=$2

  local engine_args=()
  if [ "$output_format" = "pdf" ]; then
    engine_args=(--pdf-engine=xelatex)
  fi

  local metadata_arg=()
  if [ -n "$METADATA_FILE" ]; then
    metadata_arg=(--metadata-file="$METADATA_FILE")
  fi

  pandoc "$CONVERTED_FILE" \
    "${metadata_arg[@]}" \
    --from markdown+yaml_metadata_block+native_divs+native_spans \
    --template="$TEMPLATE_PATH" \
    --metadata=implicit_figures=false \
    "${LUA_FILTERS[@]}" \
    "${engine_args[@]}" -t "$output_format" \
    -o "$output_file"
}


# Step 1: Preprocessing
convert_quotes
convert_images

echo "üì¶ Membuat PDF dari $INPUT_FILE ke $RESULT_DIR dengan tema $THEME_NAME ..."

LUA_FILTERS=()
if [ -d "$FILTER_DIR" ]; then
  for file in "$FILTER_DIR"/*.lua; do
    [ -e "$file" ] && LUA_FILTERS+=(--lua-filter="$file")
  done
else
  echo "‚ö†Ô∏è  Folder filter tidak ditemukan: $FILTER_DIR"
fi

build_with_pandoc "$OUTPUT_FILE" pdf

if [ $? -eq 0 ]; then
  echo "‚úÖ PDF berhasil dibuat: $OUTPUT_FILE"
  open "$OUTPUT_FILE"
else
  echo "‚ùå Gagal membuat PDF. Silakan periksa error di atas."
  exit 1
fi

if [ "$EXPORT_TEX" = true ]; then
  echo "üìù Mengekspor file TEX ke $OUTPUT_TEX_FILE ..."
  build_with_pandoc "$OUTPUT_TEX_FILE" latex

  if [ $? -eq 0 ]; then
    echo "‚úÖ TEX berhasil diekspor: $OUTPUT_TEX_FILE"
  else
    echo "‚ùå Gagal mengekspor TEX."
  fi
else
  echo "‚ÑπÔ∏è  Lewati ekspor TEX (aktifkan dengan --latex)"
fi
